# INFO
info:
  service_name: ${spring.application.name}
  maven_version: ${project.version}
  git.dirty: ${git.dirty}
  git.branch: ${git.branch}
  git.tags: ${git.tags}
  git.build.time: ${git.build.time}
  git.build.version: ${git.build.version}
  git.closest.tag.name: ${git.closest.tag.name}
  git.commit.time: ${git.commit.time}
  git.commit.id: ${git.commit.id}
  git.commit.id.abbrev: ${git.commit.id.abbrev}
  git.commit.user.name: ${git.commit.user.name}
  git.commit.user.email: ${git.commit.user.email}
  git.remote.origin.url: ${git.remote.origin.url}

server.servlet.context-path: / # Context path of the application.
server.port: ${SERVER_PORT:8080} # Server HTTP port.

spring:
  application:
    name: consumer
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}
  cloud:
    config:
      # Flag to say that remote configuration is enabled. (default false).
      enabled: ${SPRING_CLOUD_CONFIG_ENABLED:false}
      # Flag to indicate that failure to connect to the server is fatal (default false).
      failFast: ${SPRING_CLOUD_CONFIG_FAILFAST:false}
      discovery:
        # Flag to indicate that config server discovery is enabled (config server URL will be looked up via discovery). (default false).
        enabled: ${SPRING_CLOUD_CONFIG_DISCOVERY_ENABLED:false}
        # Service id to locate config server.
        serviceId: ${SPRING_CLOUD_CONFIG_DISCOVERY_SERVICEID:config-server}
    inetutils:
      ignored-interfaces:
        - vbox*
        - bridge*
        - docker0
        - veth.*
        - lo*
      preferredNetworks:
        - 192.168
        - 10.0

spring.main.allow-bean-definition-overriding: true # Enable bean override

---
spring.config.activate.on-profile: local
# ----------------------------------------
# ACTUATOR PROPERTIES
# ----------------------------------------
# ENDPOINTS WEB CONFIGURATION
management.endpoints.web.exposure.include: '*' # Endpoint IDs that should be included or '*' for all.
management.endpoints.web.exposure.exclude:  # Endpoint IDs that should be excluded or '*' for all.
management.endpoints.web.base-path: /management # Base path for Web endpoints. Relative to server.servlet.context-path or management.server.servlet.context-path if management.server.port is configured.
management.endpoints.web.path-mapping.health: healthcheck

# HEALTH ENDPOINT
management.endpoint.health.cache.time-to-live: 0ms # Maximum time that a response can be cached.
management.endpoint.health.enabled: true # Whether to enable the health endpoint.
management.endpoint.health.roles:  # Roles used to determine whether or not a user is authorized to be shown details. When empty, all authenticated users are authorized.
management.endpoint.health.show-details: always # When to show full health details.

# INFO CONTRIBUTORS (InfoContributorProperties)
management.info.build.enabled: true # Whether to enable build info.
management.info.defaults.enabled: true # Whether to enable default info contributors.
management.info.env.enabled: true # Whether to enable environment info.
management.info.git.enabled: true # Whether to enable git info.
management.info.git.mode: full # Mode to use to expose git information.

# LOGGING
logging.config: classpath:log4j2.xml # Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback.
logging.level: # Log levels severity mapping. For instance, `logging.level.org.springframework: DEBUG`.
  org.springframework: INFO
  com.cjrequena.sample: DEBUG

spring.cloud.stream:
  instanceCount: 1 # The number of deployed instances of an application. Must be set for partitioning and if using Kafka.
  defaultBinder: kafka # The default binder to use, if multiple binders are configured. See Multiple Binders on the Classpath.
  overrideCloudConnectors: false # This property is only applicable when the cloud profile is active and Spring Cloud Connectors are provided with the application. If the property is false (the default), the binder will detect a suitable bound service
spring.cloud.stream.function:
  definition: consumer
spring.cloud.stream.bindings:
  consumer-in-0:
    destination: spring-cloud-stream-sample-01 # The target destination of a channel on the bound middleware (e.g., the RabbitMQ exchange or Kafka topic).
    group: group-1 # The consumer group of the channel. Applies only to inbound bindings. See Consumer Groups.
    content-type: application/json # The content type of the channel.
    binder: kafka # The binder used by this binding. See Multiple Binders on the Classpath for details.
    consumer:
      concurrency: 1 # The concurrency of the inbound consumer. default 1
      partitioned: true # Whether the consumer receives data from a partitioned producer. Default: false.
      headerMode: headers # When set to raw, disables header parsing on input. Effective only for messaging middleware that does not support message headers natively and requires header embedding. Useful when inbound data is coming from outside Spring Cloud Streamapplications. efault: embeddedHeaders.
      maxAttempts: 3 # If processing fails, the number of attempts to process the message (including the first). Set to 1 to disable retry. Default: 3.
      backOffInitialInterval: 1000 # The backoff initial interval on retry. Default: 1000.
      backOffMaxInterval: 10000 # The maximum backoff interval. Default: 10000.
      backOffMultiplier: 2.0 # The backoff multiplier. Default: 2.0.
      instanceIndex: -1 # When set to a value greater than equal to zero, allows customizing the instance index of this consumer (if different from spring.cloud.stream.instanceIndex). When set to a negative value, it will default to spring.cloud.stream.instanceIndex. Default: -1.
      instanceCount: -1 # When set to a value greater than equal to zero, allows customizing the instance count of this consumer (if different from spring.cloud.stream.instanceCount). When set to a negative value, it will default to spring.cloud.stream.instanceCount. Default: -1.
      useNativeDencoding: false
spring.cloud.stream.kafka.binder:
  brokers: localhost # A list of brokers to which the Kafka binder will connect.
  defaultBrokerPort: 9092 # This sets the default port when no port is configured in the broker list
  #configuration: # Key/Value map of client properties (both producers and consumer) passed to all clients created by the binder. Due to the fact that these properties are used by both producers and consumers, usage should be restricted to common properties
  consumer-properties:
    key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value.deserializer: io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer
    schema.registry.url: http://localhost:8081
    json.value.type: com.fasterxml.jackson.databind.JsonNode
    #json.value.type: com.cjrequena.sample.event.FooEvent
  headers: # The list of custom headers that will be transported by the binder. Default: empty.
  healthTimeout: 60 # The time to wait to get partition information in seconds; default 60. Health will report as down if this timer expires.
  offsetUpdateTimeWindow: 10000 # The frequency, in milliseconds, with which offsets are saved. Ignored if 0.
  offsetUpdateCount: 0 # The frequency, in number of updates, which which consumed offsets are persisted. Ignored if 0. Mutually exclusive with offsetUpdateTimeWindow
  requiredAcks: 1 # The number of required acks on the broker.
  minPartitionCount: 1 # Effective only if autoCreateTopics or autoAddPartitions is set
  replicationFactor: 1 # The replication factor of auto-created topics if autoCreateTopics is active.
  autoCreateTopics: true # If set to true, the binder will create new topics automatically.
  autoAddPartitions: true # If set to true, the binder will create add new partitions if required
  socketBufferSize: 1000000000 # Size (in bytes) of the socket buffer to be used by the Kafka consumers
spring.cloud.sleuth:
  json:
    enabled: false
